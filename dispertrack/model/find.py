import warnings

import numpy as np
from scipy import ndimage


def find_peaks1d(image, separation, threshold=None, percentile=50, margin=None, precise=True):
    """ Find peaks in 1D images (i.e. those generated by computing the waterfall
    """

    if margin is None:
        margin = int(separation/2)+1

    if threshold is None:
        not_black = image[np.nonzero(image)]
        if len(not_black) == 0:
            threshold = np.nan
        else:
            threshold = np.percentile(not_black, percentile)

        if np.isnan(threshold):
            return np.empty(0)

    size = 2 * int(separation)

    dilation = ndimage.grey_dilation(image, size, mode='constant')
    maxima = (image == dilation) & (image > threshold)

    if np.sum(maxima) == 0:
        warnings.warn("Image contains no local maxima.", UserWarning)
        return np.empty(0)

    pos = np.where(maxima)[0]
    near_edge = (pos < margin) | (pos > (len(image) - margin - 1))

    pos = pos[~near_edge]

    if len(pos) == 0:
        warnings.warn("All local maxima were in the margins.", UserWarning)
        return np.empty((0, 1))

    if precise:
        pos = np.sort(pos)
        diff = np.diff(pos)
        splits = np.squeeze(np.argwhere(diff > separation))
        if splits.size == 1:
            return pos
        start = 0
        for split in splits:
            split += 1
            intermediate_peaks = pos[start:split]
            if len(intermediate_peaks) > 1:
                intermediate_intensities = image[intermediate_peaks]
                brightest_peak = np.argmax(intermediate_intensities)
                pos[start:split] = pos[start + brightest_peak]
            start = split
        pos = np.unique(pos)
    return pos
